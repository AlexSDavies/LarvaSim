function simData = getSimStats(dataFile,turnsFile,timestep)


%% Read data

rawData = dlmread(['../Data/' dataFile], ' ',1,0);



data = simDataToStruct(rawData);

turnIndeces = dlmread(['../Data/' turnsFile],' ',0,0);
turnStartIndeces = turnIndeces(:,1);
turnEndIndeces = turnIndeces(:,2);
simData.numTurns = length(turnIndeces);

turnStartData = simDataToStruct(rawData(turnStartIndeces,:));
turnEndData = simDataToStruct(rawData(turnEndIndeces,:));

%% BEARINGS NOW IN RANGE 0 - 2*PI
data.bearing(data.bearing < 0) = data.bearing(data.bearing < 0) + 2*pi;
turnStartData.bearing(turnStartData.bearing < 0) = turnStartData.bearing(turnStartData.bearing < 0) + 2*pi;
turnEndData.bearing(turnEndData.bearing < 0) = turnEndData.bearing(turnEndData.bearing < 0) + 2*pi;

simData.rawData = rawData;

%% Get turn info

% -1 if turn leads to lower odour, +1 if higher
turnLowHigh = sign(turnEndData.odourVal - turnStartData.odourVal);

% Changes in bearing 
bearingDiff = turnEndData.bearing - turnStartData.bearing;
bearingDiff(bearingDiff > pi) = 2*pi - bearingDiff(bearingDiff > pi);
bearingDiff(bearingDiff < -pi) = 2*pi + bearingDiff(bearingDiff < -pi);

% -1 if left, 1 if right
turnLeftRight = sign(bearingDiff);



% List of head casts preceding the turn
% 1 for cast to higher odour
% -1 for cast to lower odour
for i = 1:simData.numTurns
    
    % Get interval we're looking for head casts over
    endIndex = turnIndeces(i);
    startIndex = endIndex - 5/timestep;
    startIndex = max(startIndex,1);

    preTurnHeadAngles = data.headAngle(startIndex:endIndex);
<<<<<<< HEAD
    preTurnPerception = data.perception(startIndex:endIndex);
     
    headCastIndeces = getCrossings(preTurnHeadAngles,0.5236);
    
    headCastVals = preTurnPerception(headCastIndeces == 1);
    
    % Get perception at zero head angle position, to compare to head cast
    % values
    [~, zeroValPos] = min(preTurnHeadAngles);
    zeroVal = preTurnPerception(zeroValPos);
=======
    preTurnOdourVal = data.odourVal(startIndex:endIndex);
    
    headCastIndeces = getCrossings(preTurnHeadAngles,0.5236);
    
    headCastVals = preTurnOdourVal(headCastIndeces == 1);
    
    % Get perception at zero head angle position, to compare to head cast
    % values
    [~, zeroValPos] = min(abs(preTurnHeadAngles));
    zeroVal = preTurnOdourVal(zeroValPos);
>>>>>>> 635c9065501f040687810144450f7d27718b71fc
    
    headCastVals(headCastVals < zeroVal) = -1;
    headCastVals(headCastVals >= zeroVal) = 1;

    headCasts{i} = headCastVals;
    
end


%% Bearing / turn probability

x = 11.25:22.5:168.75;
numpoints = hist(abs(rad2deg(turnStartData.bearing)),x);

simData.turnCumulativeProb = cumsum(numpoints)/sum(numpoints);



%% Left / right pre / post turn bearing

circleTics = 0:11.25:348.75;

leftTurnIndeces = find(turnLeftRight == -1);
rightTurnIndeces = find(turnLeftRight == 1);

simData.bearingBeforeLeftTurns = hist(rad2deg(turnStartData.bearing(leftTurnIndeces)),circleTics);
simData.bearingAfterLeftTurns = hist(rad2deg(turnEndData.bearing(leftTurnIndeces)),circleTics);

simData.bearingBeforeRightTurns = hist(rad2deg(turnStartData.bearing(rightTurnIndeces)),circleTics);
simData.bearingAfterRightTurns = hist(rad2deg(turnEndData.bearing(rightTurnIndeces)),circleTics);


%% Turn to low / high bearing

turnLowIndeces = (turnLowHigh == -1);
turnHighIndeces = (turnLowHigh == 1);

simData.bearingBeforeTurnsToLow = hist(rad2deg(turnStartData.bearing(turnLowIndeces)),circleTics);
simData.bearingBeforeTurnsToHigh = hist(rad2deg(turnStartData.bearing(turnHighIndeces)),circleTics);


%% Scatter bearing / |delta angle|

% deltaAngles = data(turnEndIndeces,3) - data(turnStartIndeces,3);
% deltaAngles(deltaAngles > pi) = 2*pi - deltaAngles(deltaAngles > pi);
% 
% simData.deltaAngles(deltaAngles < -pi) = 2*pi + deltaAngles(deltaAngles < -pi);


%% Prob left turn

numIntervals = 12;
interval = (2*pi)/numIntervals;
probs = zeros(1,12);

for i = 1:numIntervals
    
    % Changed from -pi + interval*(i-1)
    angle = interval*(i-1);
    
    totalCount = sum((turnStartData.bearing > angle) & (turnStartData.bearing < angle+interval));
    leftCount = sum((turnStartData.bearing > angle) & (turnStartData.bearing < angle+interval) & (bearingDiff < 0));

    if (leftCount == 0)
<<<<<<< HEAD
        probs(i) = 0;
=======
        probs(i) = NaN;
>>>>>>> 635c9065501f040687810144450f7d27718b71fc
    else
        probs(i) = leftCount/totalCount;
    end
    
end

% Convert to -pi - pi range to match larva data
probs = [probs(7:12) probs(1:6)];

simData.leftTurnProb = probs;


%% Head casts

simData.numCasts = cellfun(@length,headCasts);
<<<<<<< HEAD
=======
castCounts = [];
>>>>>>> 635c9065501f040687810144450f7d27718b71fc

for i = 1:max(simData.numCasts)
   castCounts(i) = sum(simData.numCasts == i); 
end

simData.castNumRatio = castCounts./sum(castCounts);

% Casts H, L
oneCastCounts(1) = sum(cellfun(@(x) isequal(x,[1]),headCasts));
oneCastCounts(2) = sum(cellfun(@(x) isequal(x,[-1]),headCasts));

simData.oneCastRatios = oneCastCounts./sum(oneCastCounts);

% Casts HH, LH, HL, LL
twoCastCounts(1) = sum(cellfun(@(x) isequal(x,[1 1]'),headCasts));
twoCastCounts(2) = sum(cellfun(@(x) isequal(x,[-1 1]'),headCasts));
twoCastCounts(3) = sum(cellfun(@(x) isequal(x,[1 -1]'),headCasts));
twoCastCounts(4) = sum(cellfun(@(x) isequal(x,[-1 -1]'),headCasts));

simData.twoCastRatios = twoCastCounts./sum(twoCastCounts);


% Casts HHH, HLH, LHH, LLH, HHL, HLL, LHL, LLL
threeCastCounts(1) = sum(cellfun(@(x) isequal(x,[1 1 1]'),headCasts));
threeCastCounts(2) = sum(cellfun(@(x) isequal(x,[1 -1 1]'),headCasts));
threeCastCounts(3) = sum(cellfun(@(x) isequal(x,[-1 1 1]'),headCasts));
threeCastCounts(4) = sum(cellfun(@(x) isequal(x,[-1 -1 1]'),headCasts));
threeCastCounts(5) = sum(cellfun(@(x) isequal(x,[1 1 -1]'),headCasts));
threeCastCounts(6) = sum(cellfun(@(x) isequal(x,[1 -1 -1]'),headCasts));
threeCastCounts(7) = sum(cellfun(@(x) isequal(x,[-1 1 -1]'),headCasts));
threeCastCounts(8) = sum(cellfun(@(x) isequal(x,[-1 -1 -1]'),headCasts));

simData.threeCastRatios = threeCastCounts./sum(threeCastCounts);


